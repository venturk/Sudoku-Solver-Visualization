{"version":3,"sources":["board/BoardGuiFromMatrix.jsx","toolbar/Toolbar.jsx","solvingAlgorithm/SolvingAlgorithm.jsx","board/RandomizedBoardMatrix.jsx","sudokoBoard/SudokuBoard.jsx","App.js","serviceWorker.js","index.js"],"names":["emptyBoard","Board","props","board","undefined","children","map","row","i","key","val","j","className","value","type","onChange","onUserInput","Toolbar","min","max","onSliderChange","child","possible","r","c","startR","Math","floor","r2","startC","c2","randomNumberInRange","minimum","maximum","random","getRandomizedBoard","numOfElements","rndIdxArr","push","temp","rndIdx","currIdx","length","popRndElementsFromBoard","k","SudokuBoard","getNewRandomizedBoard","setState","fixInitialValues","solve","state","console","log","seqArr","v","solver","event","target","isNaN","index","split","this","boardCells","document","getElementsByClassName","readOnly","style","color","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.acc36f9a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './BoardStyle.css';\r\n\r\nconst emptyBoard = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n  ];\r\n\r\nconst Board = props => {\r\n    const board = props.children !== undefined ? props.children : emptyBoard;\r\n\r\n    return (\r\n        <table>\r\n            <tbody>\r\n                {\r\n                    board.map((row, i) => (\r\n                        <tr key={i}>\r\n                            {\r\n                                row.map((val, j) =>\r\n                                    <td className=\r\n                                        {\r\n                                            `${(i * 9 + j) % 9 === 3 || (i * 9 + j) % 9 === 6 || (i * 9 + j) % 9 === 0 ? \"td-left-border\" :\r\n                                                (i * 9 + j) % 9 === 8 ? \"td-right-border\" : \"\"} \r\n                                            ${(i * 9 + j) % 27 >= 0 && (i * 9 + j) % 27 <= 8 ? \"td-top-border\" :\r\n                                                (i * 9 + j) % 27 >= 18 && (i * 9 + j) % 27 <= 26 ? \"td-bottom-border\" : \"\"}\r\n                                            `\r\n                                        }\r\n                                        key={j} value={i * 9 + j}>\r\n                                        <input className={`table-cell-text ${i * 9 + j}`} type=\"text\" value={val === 0 ? '' : val} onChange={props.onUserInput} />\r\n                                    </td>\r\n                                )\r\n                            }\r\n                        </tr>\r\n                    ))\r\n                }\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport './Toolbar.css';\r\n\r\nconst MIN_NUM_OF_ELEMENTS = \"30\";\r\nconst MAX_NUM_OF_ELEMENTS = \"81\";\r\n\r\nconst Toolbar = props => {\r\n    return (\r\n        <header className=\"toolbar\">\r\n            <nav className=\"toolbar__navigation\">\r\n                <div></div>\r\n                <div className=\"toolbar__logo\">\r\n                    Sudoku Solver Visualization\r\n                </div>\r\n\r\n                <div className=\"spacer\"></div>\r\n\r\n                <div className=\"num-of-elements\">{MIN_NUM_OF_ELEMENTS}</div>\r\n                <input className=\"slider\" type=\"range\" min={MIN_NUM_OF_ELEMENTS} max={MAX_NUM_OF_ELEMENTS} onChange={props.onSliderChange}></input>\r\n                <div className=\"num-of-elements\">{MAX_NUM_OF_ELEMENTS}</div>\r\n\r\n                <div className=\"spacer\"></div>\r\n\r\n                <div className=\"toolbar_navigation-items\">\r\n                    <ul>\r\n                        {\r\n                            props.children.map(child => (\r\n                                <li>{child}</li>\r\n                            ))\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Toolbar;","export function solve(board, seqArr) {\r\n    for (let i = 0; i < 9; ++i) {\r\n        for (let j = 0; j < 9; ++j) {\r\n            if (board[i][j] === 0) {\r\n                for (let v = 1; v <= 9; ++v) {\r\n                    if (possible(board, i, j, v)) {\r\n                        board[i][j] = v;\r\n                        seqArr.push([i, j, v]); // sequence\r\n\r\n                        if (solve(board, seqArr)) {\r\n                            return true;\r\n                        }\r\n\r\n                        board[i][j] = 0;\r\n                        seqArr.push([i, j, 0]); // sequence\r\n                    }\r\n                }\r\n\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function possible(board, r, c, val) {\r\n    if (val === 0) {\r\n        return true;\r\n    }\r\n\r\n    // Check if value is in same row or column\r\n    for (let i = 0; i < 9; ++i) {\r\n        if (board[r][i] === val) {\r\n            return false;\r\n        }\r\n\r\n        if (board[i][c] === val) {\r\n            return false;\r\n        }\r\n\r\n        // Check if value is in same square\r\n        let startR = Math.floor(r / 3) * 3;\r\n        for (let r2 = startR; r2 < startR + 3; ++r2) {\r\n            let startC = Math.floor(c / 3) * 3;\r\n            for (let c2 = startC; c2 < startC + 3; ++c2) {\r\n                if ((c2 !== c || r2 !== r) && board[r2][c2] === val) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport function checkIfSolved(board) {\r\n    for (let i = 0; i < 9; ++i) {\r\n        for (let j = 0; j < 9; ++j) {\r\n            // If there's an empty cell --> board is NOT solved\r\n            if (board[i][j] === 0) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    \r\n    return true;\r\n}","function getDefaultBoardCopy() {\r\n    return [\r\n        [8, 2, 7, 1, 5, 4, 3, 9, 6],\r\n        [9, 6, 5, 3, 2, 7, 1, 4, 8],\r\n        [3, 4, 1, 6, 8, 9, 7, 5, 2],\r\n        [5, 9, 3, 4, 6, 8, 2, 7, 1],\r\n        [4, 7, 2, 5, 1, 3, 6, 8, 9],\r\n        [6, 1, 8, 9, 7, 2, 4, 3, 5],\r\n        [7, 8, 6, 2, 3, 5, 9, 1, 4],\r\n        [1, 5, 4, 7, 9, 6, 8, 2, 3],\r\n        [2, 3, 9, 8, 4, 1, 5, 6, 7]\r\n    ];\r\n}\r\n\r\nfunction popRndElementsFromBoard(numOfElements) { // Change function name\r\n    const rndIdxArr = []; // Random index array\r\n    const board = getDefaultBoardCopy();\r\n\r\n    for (let i = 0; i < 81; ++i) { // Init index array with 0 - 80 index values\r\n        rndIdxArr.push(i);\r\n    }\r\n\r\n    let currIdx = rndIdxArr.length;\r\n    let temp, rndIdx;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currIdx) {\r\n\r\n        // Pick a remaining element...\r\n        rndIdx = Math.floor(Math.random() * currIdx);\r\n\r\n        // Swap it with current element.\r\n        temp = rndIdxArr[--currIdx];\r\n        rndIdxArr[currIdx] = rndIdxArr[rndIdx];\r\n        rndIdxArr[rndIdx] = temp;\r\n    }\r\n\r\n    // Pop elements\r\n    for (let i = 0; i < rndIdxArr.length - numOfElements; ++i) {\r\n        let r = Math.floor(rndIdxArr[i] / 9);\r\n        let c = rndIdxArr[i] % 9;\r\n        board[r][c] = 0;\r\n    }\r\n\r\n    return board;\r\n}\r\n\r\nfunction getRandomizedBoard(numOfElements) {\r\n    const board = popRndElementsFromBoard(numOfElements);\r\n\r\n    for (let i = 0; i < 9; i += 3) {\r\n        // Swapping rows\r\n        let k = randomNumberInRange(i, i + 2);\r\n        if (k !== i) {\r\n            const temp = board[i];\r\n            board[i] = board[k];\r\n            board[k] = temp;\r\n        }\r\n\r\n        // Swapping columns\r\n        k = randomNumberInRange(i, i + 2);\r\n        if (k !== i) {\r\n            for (let j = 0; j < 9; ++j) {\r\n                const temp = board[j][i];\r\n                board[j][i] = board[j][k];\r\n                board[j][k] = temp;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Swaping rows of boxes\r\n    const k = 3 * randomNumberInRange(0, 2);\r\n    if (k !== 0) {\r\n        for (let i = 0; i < 3; ++i) {\r\n            const temp = board[i];\r\n            board[i] = board[k + i];\r\n            board[k + i] = temp;\r\n        }\r\n    }\r\n\r\n    return board;\r\n}\r\n\r\nfunction randomNumberInRange(minimum, maximum) {\r\n    return Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;\r\n}\r\n\r\nexport default getRandomizedBoard;","import React from 'react';\r\nimport Board from '../board/BoardGuiFromMatrix.jsx'\r\nimport Toolbar from '../toolbar/Toolbar.jsx';\r\nimport * as solver from '../solvingAlgorithm/SolvingAlgorithm.jsx';\r\nimport getRandomizedBoard from '../board/RandomizedBoardMatrix.jsx';\r\n\r\nconst USER_COLOR = \"lightblue\";\r\nconst DEFAULT_COLOR = \"black\";\r\n\r\nexport default class SudokuBoard extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.numOfElements = 35;\r\n        this.state = {\r\n            board: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getNewRandomizedBoard();\r\n    }\r\n\r\n    getNewRandomizedBoard = () => {\r\n        this.setState({\r\n            board: getRandomizedBoard(this.numOfElements)\r\n        }, () => { this.fixInitialValues(); })\r\n    }\r\n\r\n    fixInitialValues() {\r\n        const boardCells = document.getElementsByClassName('table-cell-text');\r\n        const { board } = this.state;\r\n\r\n        for (let i = 0; i < boardCells.length; ++i) {\r\n            const r = Math.floor(i / 9), c = i % 9;\r\n            boardCells[i].readOnly = (board[r][c] !== 0);\r\n            boardCells[i].style.color = boardCells[i].readOnly === false ? USER_COLOR : DEFAULT_COLOR;\r\n            boardCells[i].value = board[r][c] !== 0 ? board[r][c] : '';\r\n        }\r\n    }\r\n\r\n    solve = () => {\r\n        const seqArr = [];\r\n        const { board } = this.state;\r\n        console.log(board);\r\n        solver.solve(board, seqArr);\r\n        this.setState({ board: board });\r\n    }\r\n\r\n    onSliderChange = (event) => { // TODO implement onSliderChange\r\n        this.numOfElements = event.target.value;\r\n        this.getNewRandomizedBoard();\r\n    }\r\n\r\n    onUserInput = (event) => {\r\n        const value = event.target.value % 10;\r\n        if(isNaN(value)) {\r\n            return;\r\n        }\r\n\r\n        console.log(value);\r\n        const {board} = this.state;\r\n        const index = event.target.className.split(' ')[1];\r\n        const r = Math.floor(index / 9), c = index % 9;\r\n\r\n        if(board[r][c] !== value) {\r\n            board[r][c] = solver.possible(board, r, c, value) ? value : board[r][c];\r\n        }\r\n        this.setState({board: board});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Toolbar onSliderChange={this.onSliderChange}>\r\n                    <button onClick={this.getNewRandomizedBoard}>Randomize Board</button>\r\n                    <button onClick={this.solve}>Solve</button>\r\n                </Toolbar>\r\n                <Board onUserInput={this.onUserInput}>\r\n                    {this.state.board}\r\n                </Board>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport SudokuBoard from './sudokoBoard/SudokuBoard.jsx';\n\nfunction App() {\n  return (\n    <SudokuBoard></SudokuBoard>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}