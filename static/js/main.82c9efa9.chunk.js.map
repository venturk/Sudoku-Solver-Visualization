{"version":3,"sources":["board/Board.jsx","toolbar/Toolbar.jsx","App.js","serviceWorker.js","index.js"],"names":["emptyBoard","Board","props","board","undefined","children","map","row","i","key","val","j","className","value","type","onChange","Toolbar","min","max","onSliderChange","child","App","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.82c9efa9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Board.css';\r\n\r\nconst emptyBoard = [\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    [0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n  ];\r\n\r\nconst Board = props => {\r\n    const board = props.children !== undefined ? props.children : emptyBoard;\r\n\r\n    return (\r\n        <table>\r\n            <tbody>\r\n                {\r\n                    board.map((row, i) => (\r\n                        <tr key={i}>\r\n                            {\r\n                                row.map((val, j) =>\r\n                                    <td className=\r\n                                        {\r\n                                            `${(i * 9 + j) % 9 === 3 || (i * 9 + j) % 9 === 6 || (i * 9 + j) % 9 === 0 ? \"td-left-border\" :\r\n                                                (i * 9 + j) % 9 === 8 ? \"td-right-border\" : \"\"} \r\n                                            ${(i * 9 + j) % 27 >= 0 && (i * 9 + j) % 27 <= 8 ? \"td-top-border\" :\r\n                                                (i * 9 + j) % 27 >= 18 && (i * 9 + j) % 27 <= 26 ? \"td-bottom-border\" : \"\"}\r\n                                            `\r\n                                        }\r\n                                        key={j} value={i * 9 + j}>\r\n                                        <input className={`table-cell-text ${i * 9 + j}`} type=\"text\" value={val === 0 ? '' : val} onChange={props.onChange} />\r\n                                    </td>\r\n                                )\r\n                            }\r\n                        </tr>\r\n                    ))\r\n                }\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport './Toolbar.css';\r\n\r\nconst MIN_NUM_OF_ELEMENTS = \"30\";\r\nconst MAX_NUM_OF_ELEMENTS = \"81\";\r\n\r\nconst Toolbar = props => {\r\n    return (\r\n        <header className=\"toolbar\">\r\n            <nav className=\"toolbar__navigation\">\r\n                <div></div>\r\n                <div className=\"toolbar__logo\">\r\n                    Sudoku Solver Visualization\r\n                </div>\r\n\r\n                <div className=\"spacer\"></div>\r\n\r\n                <div className=\"num-of-elements\">{MIN_NUM_OF_ELEMENTS}</div>\r\n                <input className=\"slider\" type=\"range\" min={MIN_NUM_OF_ELEMENTS} max={MAX_NUM_OF_ELEMENTS} onChange={props.onSliderChange}></input>\r\n                <div className=\"num-of-elements\">{MAX_NUM_OF_ELEMENTS}</div>\r\n\r\n                <div className=\"spacer\"></div>\r\n\r\n                <div className=\"toolbar_navigation-items\">\r\n                    <ul>\r\n                        {\r\n                            props.children.map(child => (\r\n                                <li>{child}</li>\r\n                            ))\r\n                        }\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Toolbar;","import React from 'react';\nimport Board from './board/Board.jsx'\nimport Toolbar from './toolbar/Toolbar.jsx';\n\nconst board = [\n  [8, 2, 7, 1, 5, 4, 3, 9, 6],\n  [9, 6, 5, 3, 2, 7, 1, 4, 8],\n  [3, 4, 1, 6, 8, 9, 7, 5, 2],\n  [5, 9, 3, 4, 6, 8, 2, 7, 1],\n  [4, 7, 2, 5, 1, 3, 6, 8, 9],\n  [6, 1, 8, 9, 7, 2, 4, 3, 5],\n  [7, 8, 6, 2, 3, 5, 9, 1, 4],\n  [1, 5, 4, 7, 9, 6, 8, 2, 3],\n  [2, 3, 9, 8, 4, 1, 5, 6, 7]\n];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Toolbar>\n        <button onClick=\"\">Randomize Board</button>\n        <button onClick=\"\">Solve</button>\n      </Toolbar>\n      <Board>\n        {board}\n      </Board>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}